
gpio_library.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a42  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bd  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000440  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);		// Set bit (or)
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_pullup>:
  98:	fc 01       	movw	r30, r24
  9a:	80 81       	ld	r24, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_pullup+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_pullup+0xa>
  aa:	92 2f       	mov	r25, r18
  ac:	90 95       	com	r25
  ae:	89 23       	and	r24, r25
  b0:	80 83       	st	Z, r24
  b2:	80 81       	ld	r24, Z
  b4:	81 81       	ldd	r24, Z+1	; 0x01
  b6:	28 2b       	or	r18, r24
  b8:	21 83       	std	Z+1, r18	; 0x01
  ba:	08 95       	ret

000000bc <GPIO_write_low>:
  bc:	fc 01       	movw	r30, r24
  be:	20 81       	ld	r18, Z
  c0:	20 83       	st	Z, r18
  c2:	08 95       	ret

000000c4 <GPIO_toggle>:

/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);		// Toggle bit (xor)
  c4:	fc 01       	movw	r30, r24
  c6:	40 81       	ld	r20, Z
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <GPIO_toggle+0xe>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <GPIO_toggle+0xa>
  d6:	24 27       	eor	r18, r20
  d8:	20 83       	st	Z, r18
  da:	08 95       	ret

000000dc <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
			
	if (bit_is_clear(*reg_name, pin_num))
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <GPIO_read+0xc>
  e4:	95 95       	asr	r25
  e6:	87 95       	ror	r24
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <GPIO_read+0x8>
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	8f 27       	eor	r24, r31
	{

		return 0;

	}
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	08 95       	ret

000000f4 <main>:
 */
int main(void)
{
	
	/* RED LED */
	GPIO_config_output(&DDRC, LED_RED);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	87 e2       	ldi	r24, 0x27	; 39
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTC, LED_RED); //LED off, because active-low
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	88 e2       	ldi	r24, 0x28	; 40
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>

    /* GREEN LED */
    GPIO_config_output(&DDRB, LED_GREEN);
 108:	65 e0       	ldi	r22, 0x05	; 5
 10a:	84 e2       	ldi	r24, 0x24	; 36
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_GREEN); //LED off, because active-high
 112:	65 e0       	ldi	r22, 0x05	; 5
 114:	85 e2       	ldi	r24, 0x25	; 37
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 5e 00 	call	0xbc	; 0xbc <GPIO_write_low>
	
    /* push button */
    GPIO_config_input_pullup(&DDRD, BTN);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	8a e2       	ldi	r24, 0x2A	; 42
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_pullup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	98 e1       	ldi	r25, 0x18	; 24
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x38>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x42>
 136:	00 00       	nop
    while(1)
    {
		
		// Pause several milliseconds
		_delay_ms(BLINK_DELAY);
		if (GPIO_read(&PIND, BTN)) //Check if the button is pressed
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	89 e2       	ldi	r24, 0x29	; 41
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_read>
 142:	88 23       	and	r24, r24
 144:	81 f3       	breq	.-32     	; 0x126 <main+0x32>
		{
	
			GPIO_toggle(&PORTB, LED_GREEN);		// Revert the green LED
 146:	65 e0       	ldi	r22, 0x05	; 5
 148:	85 e2       	ldi	r24, 0x25	; 37
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_toggle>
			GPIO_toggle(&PORTC, LED_RED);		// Revert the red LED
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_toggle>
 15a:	e5 cf       	rjmp	.-54     	; 0x126 <main+0x32>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
