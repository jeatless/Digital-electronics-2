
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9a  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e0  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(0<<pin_num);		// Clear bit (and not)
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);		// Set bit (or)
  e2:	fc 01       	movw	r30, r24
  e4:	40 81       	ld	r20, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_high+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_high+0xa>
  f4:	24 2b       	or	r18, r20
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_toggle>:

/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);		// Toggle bit (xor)
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_toggle+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_toggle+0xa>
 10c:	24 27       	eor	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_read>:
/*--------------------------------------------------------------------*/
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
			
	if (bit_is_set(*reg_name, pin_num))
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_read+0xc>
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_read+0x8>
	{

		return 0;

	}
 122:	81 70       	andi	r24, 0x01	; 1
 124:	08 95       	ret

00000126 <main>:
int backwards = 0;

int main(void)
{
    /* LED configurations */
    GPIO_config_output(&DDRB, array[0]);
 126:	c0 e0       	ldi	r28, 0x00	; 0
 128:	d1 e0       	ldi	r29, 0x01	; 1
 12a:	68 81       	ld	r22, Y
 12c:	84 e2       	ldi	r24, 0x24	; 36
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_high(&PORTB, array[0]);
 134:	68 81       	ld	r22, Y
 136:	85 e2       	ldi	r24, 0x25	; 37
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_high>
	
	GPIO_config_output(&DDRB, array[1]);
 13e:	69 81       	ldd	r22, Y+1	; 0x01
 140:	84 e2       	ldi	r24, 0x24	; 36
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_high(&PORTB, array[1]);
 148:	69 81       	ldd	r22, Y+1	; 0x01
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_high>
			
	GPIO_config_output(&DDRB, array[2]);	
 152:	6a 81       	ldd	r22, Y+2	; 0x02
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_high(&PORTB, array[2]);
 15c:	6a 81       	ldd	r22, Y+2	; 0x02
 15e:	85 e2       	ldi	r24, 0x25	; 37
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_high>
			
	GPIO_config_output(&DDRB, array[3]);
 166:	6b 81       	ldd	r22, Y+3	; 0x03
 168:	84 e2       	ldi	r24, 0x24	; 36
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_high(&PORTB, array[3]);
 170:	6b 81       	ldd	r22, Y+3	; 0x03
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_high>


	/* Push-button set-up */
	GPIO_config_input_pullup(&DDRD, BTN);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	8a e2       	ldi	r24, 0x2A	; 42
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
    
    // Enables interrupts by setting the global interrupt mask
    sei();
 184:	78 94       	sei
		}
		else
		{
			/* Configuration of 16-bit Timer/Counter1
			 * Set prescaler and enable overflow interrupt */
			 TIM1_overflow_262ms();
 186:	c1 e8       	ldi	r28, 0x81	; 129
 188:	d0 e0       	ldi	r29, 0x00	; 0
		     TIM1_overflow_interrupt_enable();
 18a:	0f e6       	ldi	r16, 0x6F	; 111
 18c:	10 e0       	ldi	r17, 0x00	; 0
    sei();

    // Infinite loop
    while (1)
    {
		if (GPIO_read(&PIND, BTN))
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	89 e2       	ldi	r24, 0x29	; 41
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 198:	88 23       	and	r24, r24
 19a:	59 f0       	breq	.+22     	; 0x1b2 <main+0x8c>
		{
			/* Configuration of 16-bit Timer/Counter1
			 * Set prescaler and enable overflow interrupt */
			TIM1_overflow_1s();
 19c:	88 81       	ld	r24, Y
 19e:	8c 7f       	andi	r24, 0xFC	; 252
 1a0:	88 83       	st	Y, r24
 1a2:	88 81       	ld	r24, Y
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	88 83       	st	Y, r24
			TIM1_overflow_interrupt_enable();
 1a8:	f8 01       	movw	r30, r16
 1aa:	80 81       	ld	r24, Z
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
 1b0:	ee cf       	rjmp	.-36     	; 0x18e <main+0x68>
		}
		else
		{
			/* Configuration of 16-bit Timer/Counter1
			 * Set prescaler and enable overflow interrupt */
			 TIM1_overflow_262ms();
 1b2:	88 81       	ld	r24, Y
 1b4:	8b 7f       	andi	r24, 0xFB	; 251
 1b6:	88 83       	st	Y, r24
 1b8:	88 81       	ld	r24, Y
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	88 83       	st	Y, r24
		     TIM1_overflow_interrupt_enable();
 1be:	f8 01       	movw	r30, r16
 1c0:	80 81       	ld	r24, Z
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24
 1c6:	e3 cf       	rjmp	.-58     	; 0x18e <main+0x68>

000001c8 <__vector_13>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter1 overflows. Toggle LED D2 on 
 * Multi-function shield. */
ISR(TIMER1_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	/* Toggle (turn on) LED_D1, because it is off at the beginning. 
	   Alternatively I could configure it "low" instead of creating this if() */
	if (GPIO_read(&PORTB,array[countLED]) == 1)
 1ea:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <countLED>
 1ee:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <countLED+0x1>
 1f2:	e0 50       	subi	r30, 0x00	; 0
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	60 81       	ld	r22, Z
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_read>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	61 f4       	brne	.+24     	; 0x21c <__vector_13+0x54>
	{
		GPIO_toggle(&PORTB, array[countLED]);
 204:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <countLED>
 208:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <countLED+0x1>
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	60 81       	ld	r22, Z
 212:	85 e2       	ldi	r24, 0x25	; 37
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_toggle>
 21a:	40 c0       	rjmp	.+128    	; 0x29c <__vector_13+0xd4>
	}
	else
	{
		//Toggle previous LED
		GPIO_toggle(&PORTB, array[countLED]);
 21c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <countLED>
 220:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <countLED+0x1>
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	ff 4f       	sbci	r31, 0xFF	; 255
 228:	60 81       	ld	r22, Z
 22a:	85 e2       	ldi	r24, 0x25	; 37
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_toggle>
	
		//Direction up/down
		if(countLED == 3)
 232:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <countLED>
 236:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <countLED+0x1>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	91 05       	cpc	r25, r1
 23e:	39 f4       	brne	.+14     	; 0x24e <__vector_13+0x86>
		{
			backwards = 1;
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 248:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 24c:	17 c0       	rjmp	.+46     	; 0x27c <__vector_13+0xb4>
		}
		if(countLED == 0)
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	29 f4       	brne	.+10     	; 0x25c <__vector_13+0x94>
		{
			backwards = 0;
 252:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 256:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 25a:	07 c0       	rjmp	.+14     	; 0x26a <__vector_13+0xa2>
		}
		
		if(backwards == 0)
 25c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 260:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 264:	21 15       	cp	r18, r1
 266:	31 05       	cpc	r19, r1
 268:	31 f4       	brne	.+12     	; 0x276 <__vector_13+0xae>
		{
			countLED++;
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <countLED+0x1>
 270:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <countLED>
 274:	08 c0       	rjmp	.+16     	; 0x286 <__vector_13+0xbe>
		}
		else if(backwards == 1)
 276:	21 30       	cpi	r18, 0x01	; 1
 278:	31 05       	cpc	r19, r1
 27a:	29 f4       	brne	.+10     	; 0x286 <__vector_13+0xbe>
		{
			countLED--;
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <countLED+0x1>
 282:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <countLED>
		}
	
		//Toggle next LED
		GPIO_toggle(&PORTB, array[countLED]);
 286:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <countLED>
 28a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <countLED+0x1>
 28e:	e0 50       	subi	r30, 0x00	; 0
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	60 81       	ld	r22, Z
 294:	85 e2       	ldi	r24, 0x25	; 37
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_toggle>


	}
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
