
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000027e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e84  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d9  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000454  00000000  00000000  00002729  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);		// Clear bit (and not)
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);		// Set bit (or)
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
uint8_t cnt0 = 0;	// Decimal counter value on position 0

int main(void)
{	
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 ba 00 	call	0x174	; 0x174 <SEG_init>
	// Test of SSD: display number '3' at position 0
	// SEG_update_shift_regs(3, 0);
     
	/* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_262ms();
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	83 60       	ori	r24, 0x03	; 3
 102:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
   
	// Enables interrupts by setting the global interrupt mask
	sei();
 10e:	78 94       	sei
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x20>

00000112 <__vector_13>:
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */

ISR(TIMER1_OVF_vect)	
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	
 	cnt0++;				// Increase cnt0 by one
 134:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 138:	8f 5f       	subi	r24, 0xFF	; 255
	if(cnt0 >= 6)		// Count to 6
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	18 f4       	brcc	.+6      	; 0x144 <__vector_13+0x32>
 */

ISR(TIMER1_OVF_vect)	
{
	
 	cnt0++;				// Increase cnt0 by one
 13e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_13+0x36>
	if(cnt0 >= 6)		// Count to 6
 	cnt0 = 0;			// Set cnt0 to 0
 144:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>

    SEG_update_shift_regs(cnt0, 0);	
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14e:	0e 94 ca 00 	call	0x194	; 0x194 <SEG_update_shift_regs>
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 174:	64 e0       	ldi	r22, 0x04	; 4
 176:	8a e2       	ldi	r24, 0x2A	; 42
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 17e:	67 e0       	ldi	r22, 0x07	; 7
 180:	8a e2       	ldi	r24, 0x2A	; 42
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	84 e2       	ldi	r24, 0x24	; 36
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 192:	08 95       	ret

00000194 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
    uint8_t bit_number;
	
	segments = segment_value1[segments];     // A,B,C,D,E,F...
 19a:	e8 2f       	mov	r30, r24
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ec 5f       	subi	r30, 0xFC	; 252
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	10 81       	ld	r17, Z
	position = segment_position1[position];
 1a4:	e6 2f       	mov	r30, r22
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e0 50       	subi	r30, 0x00	; 0
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	d0 81       	ld	r29, Z

  	
    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);	// LATCH
 1ae:	64 e0       	ldi	r22, 0x04	; 4
 1b0:	8b e2       	ldi	r24, 0x2B	; 43
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);	// CLK
 1b8:	67 e0       	ldi	r22, 0x07	; 7
 1ba:	8b e2       	ldi	r24, 0x2B	; 43
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);	// DATA
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	8a 95       	dec	r24
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <SEG_update_shift_regs+0x3a>
 1d2:	00 00       	nop
 1d4:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if((segments % 2)==0) // LSB is 0
 1d6:	10 fd       	sbrc	r17, 0
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <SEG_update_shift_regs+0x52>
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	85 e2       	ldi	r24, 0x25	; 37
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <SEG_update_shift_regs+0x5c>
		else   
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	85 e2       	ldi	r24, 0x25	; 37
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 1f0:	85 e0       	ldi	r24, 0x05	; 5
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <SEG_update_shift_regs+0x5e>
 1f6:	00 00       	nop
			
			// Wait 1 us
			_delay_us(1);
		    // Pull CLK high
			GPIO_write_high(&PORTD, SEGMENT_CLK);
 1f8:	67 e0       	ldi	r22, 0x07	; 7
 1fa:	8b e2       	ldi	r24, 0x2B	; 43
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <SEG_update_shift_regs+0x70>
 208:	00 00       	nop
			// Wait 1 us
			_delay_us(1);
			// Pull CLK low
			GPIO_write_low(&PORTD, SEGMENT_CLK);
 20a:	67 e0       	ldi	r22, 0x07	; 7
 20c:	8b e2       	ldi	r24, 0x2B	; 43
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		    // Shift "segments"
			
        segments = segments >> 1;
 214:	16 95       	lsr	r17
 216:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 218:	f1 f6       	brne	.-68     	; 0x1d6 <SEG_update_shift_regs+0x42>
 21a:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
		// Output DATA value (bit 0 of "position")
		if((position % 2)==0)// LSB is 0	
 21c:	d0 fd       	sbrc	r29, 0
 21e:	06 c0       	rjmp	.+12     	; 0x22c <SEG_update_shift_regs+0x98>
		
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	85 e2       	ldi	r24, 0x25	; 37
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 22a:	05 c0       	rjmp	.+10     	; 0x236 <SEG_update_shift_regs+0xa2>
		
		else
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	85 e2       	ldi	r24, 0x25	; 37
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <SEG_update_shift_regs+0xa4>
 23c:	00 00       	nop
		    
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 23e:	67 e0       	ldi	r22, 0x07	; 7
 240:	8b e2       	ldi	r24, 0x2B	; 43
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <SEG_update_shift_regs+0xb6>
 24e:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 250:	67 e0       	ldi	r22, 0x07	; 7
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
		
        position = position >> 1;
 25a:	d6 95       	lsr	r29
 25c:	c1 50       	subi	r28, 0x01	; 1
			
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 25e:	f1 f6       	brne	.-68     	; 0x21c <SEG_update_shift_regs+0x88>
        position = position >> 1;
		
	}

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <SEG_update_shift_regs+0xd8>
 270:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
 
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
