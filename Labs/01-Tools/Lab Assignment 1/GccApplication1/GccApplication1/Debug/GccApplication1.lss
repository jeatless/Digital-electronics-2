
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a9  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00000c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  000012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <long_blink>:
#include <util/delay.h>						// Functions for busy-wait delay loops
#include <avr/io.h>

void long_blink()							// This function realizes so called "dash" of morse code
{
	PORTB = PORTB | (1<<LED_GREEN);			// Turns the LED on by setting PB5 "1" through shifting
  80:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	8d e3       	ldi	r24, 0x3D	; 61
  86:	99 e4       	ldi	r25, 0x49	; 73
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <long_blink+0x8>
  90:	00 c0       	rjmp	.+0      	; 0x92 <long_blink+0x12>
  92:	00 00       	nop
	_delay_ms(THREE_UNITS_DELAY);			// Three units "dash"
	PORTB = PORTB & ~(1<<LED_GREEN);		// Turns the LED off with "And" operation and inverse
  94:	2d 98       	cbi	0x05, 5	; 5
  96:	08 95       	ret

00000098 <short_blink>:
}


void short_blink()							// This function realizes so called "dot" of morse code
{
	PORTB = PORTB | (1<<LED_GREEN);			// Turns the LED on by setting PB5 "1" through shifting
  98:	2d 9a       	sbi	0x05, 5	; 5
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 e6       	ldi	r24, 0x69	; 105
  9e:	98 e1       	ldi	r25, 0x18	; 24
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <short_blink+0x8>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <short_blink+0x12>
  aa:	00 00       	nop
	_delay_ms(ONE_UNIT_DELAY);				// One second "dot"
	PORTB = PORTB & ~(1<<LED_GREEN);		// Turns the LED off with "And" operation and inverse
  ac:	2d 98       	cbi	0x05, 5	; 5
  ae:	08 95       	ret

000000b0 <gap>:
}


void gap()									// We put gap between letters to make it more clear to understand where the letter ends
{
	PORTB = PORTB & ~(1<<LED_GREEN);		// Turns the LED off
  b0:	2d 98       	cbi	0x05, 5	; 5
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	8d e3       	ldi	r24, 0x3D	; 61
  b6:	99 e4       	ldi	r25, 0x49	; 73
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <gap+0x8>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <gap+0x12>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <main>:

int main(void)
{
	// Set pin as output in Data Direction Register
	// DDRB = DDRB or 0010 0000
	DDRB = DDRB | (1<<LED_GREEN);			
  c6:	25 9a       	sbi	0x04, 5	; 4

	// Set pin LOW in Data Register (LED off)
	// PORTB = PORTB and 1101 1111
	PORTB = PORTB & ~(1<<LED_GREEN);		
  c8:	2d 98       	cbi	0x05, 5	; 5
	while (1)
	{
		
		
		// (The letter "D" in morse code is: -..)
		long_blink();
  ca:	0e 94 40 00 	call	0x80	; 0x80 <long_blink>
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0xe>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x18>
  de:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY);			// Wait one unit between parts
		short_blink();
  e0:	0e 94 4c 00 	call	0x98	; 0x98 <short_blink>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x24>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x2e>
  f4:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY);		
		short_blink();						// End of letter "D"
  f6:	0e 94 4c 00 	call	0x98	; 0x98 <short_blink>
		
		gap();								// Wait between letters
  fa:	0e 94 58 00 	call	0xb0	; 0xb0 <gap>
		// (The letter "E" in morse code is: .)
		short_blink();						// End of letter "E"
  fe:	0e 94 4c 00 	call	0x98	; 0x98 <short_blink>
		
		gap();								// Wait between letters
 102:	0e 94 58 00 	call	0xb0	; 0xb0 <gap>
		
		// (The number "2" in morse code is: ..---)
		short_blink();						
 106:	0e 94 4c 00 	call	0x98	; 0x98 <short_blink>
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	89 e6       	ldi	r24, 0x69	; 105
 10e:	98 e1       	ldi	r25, 0x18	; 24
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x4a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x54>
 11a:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY);		
		short_blink();
 11c:	0e 94 4c 00 	call	0x98	; 0x98 <short_blink>
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	89 e6       	ldi	r24, 0x69	; 105
 124:	98 e1       	ldi	r25, 0x18	; 24
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x60>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x6a>
 130:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY);		
		long_blink();
 132:	0e 94 40 00 	call	0x80	; 0x80 <long_blink>
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	89 e6       	ldi	r24, 0x69	; 105
 13a:	98 e1       	ldi	r25, 0x18	; 24
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x76>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x80>
 146:	00 00       	nop
		_delay_ms(ONE_UNIT_DELAY);		
		long_blink();
 148:	0e 94 40 00 	call	0x80	; 0x80 <long_blink>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x8c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x96>
 15c:	00 00       	nop
			_delay_ms(ONE_UNIT_DELAY);	
		long_blink();						// End of number "2"
 15e:	0e 94 40 00 	call	0x80	; 0x80 <long_blink>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	85 ee       	ldi	r24, 0xE5	; 229
 166:	9a ea       	ldi	r25, 0xAA	; 170
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0xa2>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xac>
 172:	00 00       	nop
 174:	aa cf       	rjmp	.-172    	; 0xca <main+0x4>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
