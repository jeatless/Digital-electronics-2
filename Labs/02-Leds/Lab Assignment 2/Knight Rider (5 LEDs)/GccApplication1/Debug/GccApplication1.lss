
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008df  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006aa  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b2  00000000  00000000  0000121d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ce  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  78:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <YELLOW>:

/* Functions ---------------------------------------------------------*/
void YELLOW () 
{
	
	PORTC=PORTC ^ (1<< LED_YELLOW);
  80:	98 b1       	in	r25, 0x08	; 8
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	89 27       	eor	r24, r25
  86:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	89 e6       	ldi	r24, 0x69	; 105
  8c:	98 e1       	ldi	r25, 0x18	; 24
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <YELLOW+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <YELLOW+0x18>
  98:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTC = PORTC & ~(1<<LED_YELLOW);
  9a:	42 98       	cbi	0x08, 2	; 8
  9c:	08 95       	ret

0000009e <GREEN>:
}

void GREEN ()
{
	
	PORTC=PORTC ^ (1<<LED_GREEN);
  9e:	98 b1       	in	r25, 0x08	; 8
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	89 27       	eor	r24, r25
  a4:	88 b9       	out	0x08, r24	; 8
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	89 e6       	ldi	r24, 0x69	; 105
  aa:	98 e1       	ldi	r25, 0x18	; 24
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <GREEN+0xe>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <GREEN+0x18>
  b6:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTC = PORTC & ~(1<<LED_GREEN);
  b8:	41 98       	cbi	0x08, 1	; 8
  ba:	08 95       	ret

000000bc <RED>:
}

void RED ()
{

	PORTC=PORTC ^ (1<<LED_RED);
  bc:	98 b1       	in	r25, 0x08	; 8
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 27       	eor	r24, r25
  c2:	88 b9       	out	0x08, r24	; 8
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	98 e1       	ldi	r25, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <RED+0xe>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <RED+0x18>
  d4:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTC = PORTC & ~(1<<LED_RED);
  d6:	40 98       	cbi	0x08, 0	; 8
  d8:	08 95       	ret

000000da <BLUE>:
}

void BLUE ()
{

	PORTB=PORTB ^ (1<< LED_BLUE);
  da:	95 b1       	in	r25, 0x05	; 5
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	89 27       	eor	r24, r25
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <BLUE+0xe>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <BLUE+0x18>
  f2:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB & ~(1<<LED_BLUE);
  f4:	2a 98       	cbi	0x05, 2	; 5
  f6:	08 95       	ret

000000f8 <ORANGE>:
}

void ORANGE ()
{

	PORTB=PORTB ^ (1<< LED_ORANGE);
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	89 27       	eor	r24, r25
  fe:	85 b9       	out	0x05, r24	; 5
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <ORANGE+0xe>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <ORANGE+0x18>
 110:	00 00       	nop
	_delay_ms(BLINK_DELAY);
	PORTB = PORTB & ~(1<<LED_ORANGE);
 112:	29 98       	cbi	0x05, 1	; 5
 114:	08 95       	ret

00000116 <main>:
}

int main(void)
{
	/*YELLOW LED */
	DDRC = DDRC | (1<<LED_YELLOW);
 116:	3a 9a       	sbi	0x07, 2	; 7
	PORTC = PORTC & ~(1<<LED_YELLOW);
 118:	42 98       	cbi	0x08, 2	; 8
	
    /* GREEN LED */
    DDRC = DDRC | (1<<LED_GREEN);
 11a:	39 9a       	sbi	0x07, 1	; 7
    PORTC = PORTC & ~(1<<LED_GREEN);
 11c:	41 98       	cbi	0x08, 1	; 8

    /* RED LED */
	DDRC = DDRC | (1 << LED_RED );  
 11e:	38 9a       	sbi	0x07, 0	; 7
	PORTC = PORTC & ~(1<<LED_RED);
 120:	40 98       	cbi	0x08, 0	; 8

	/*BLUE LED*/
	DDRB = DDRB | (1<<LED_BLUE);
 122:	22 9a       	sbi	0x04, 2	; 4
	PORTB = PORTB & ~(1<<LED_BLUE);
 124:	2a 98       	cbi	0x05, 2	; 5
	
	/* ORANGE LED */
	DDRB = DDRB | (1<<LED_ORANGE);
 126:	21 9a       	sbi	0x04, 1	; 4
	PORTB = PORTB & ~(1<<LED_ORANGE);
 128:	29 98       	cbi	0x05, 1	; 5
	   
	DDRD = DDRD & ~(1<<BTN); //Turn OFF
 12a:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
 12c:	58 9a       	sbi	0x0b, 0	; 11
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	80 e7       	ldi	r24, 0x70	; 112
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x1e>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x28>
 13e:	00 00       	nop
    while (1)
	{
        // Pause several milliseconds
		_delay_ms(BLINK_DELAY2);
		
  		if (bit_is_clear(PIND, BTN))
 140:	48 99       	sbic	0x09, 0	; 9
 142:	f5 cf       	rjmp	.-22     	; 0x12e <main+0x18>
	  
		{
				YELLOW();
 144:	0e 94 40 00 	call	0x80	; 0x80 <YELLOW>
			
			
			if (bit_is_clear(PIND, BTN))
 148:	48 99       	sbic	0x09, 0	; 9
 14a:	f1 cf       	rjmp	.-30     	; 0x12e <main+0x18>
			
			{
				
				GREEN();
 14c:	0e 94 4f 00 	call	0x9e	; 0x9e <GREEN>
				
				if (bit_is_clear(PIND, BTN))
 150:	48 99       	sbic	0x09, 0	; 9
 152:	ed cf       	rjmp	.-38     	; 0x12e <main+0x18>
				
				{
					
					RED();
 154:	0e 94 5e 00 	call	0xbc	; 0xbc <RED>
					
					if (bit_is_clear(PIND, BTN))
 158:	48 99       	sbic	0x09, 0	; 9
 15a:	e9 cf       	rjmp	.-46     	; 0x12e <main+0x18>
					
					{
						
						BLUE();
 15c:	0e 94 6d 00 	call	0xda	; 0xda <BLUE>
						
						if (bit_is_clear(PIND, BTN))
 160:	48 99       	sbic	0x09, 0	; 9
 162:	e5 cf       	rjmp	.-54     	; 0x12e <main+0x18>
						
						{
							
							ORANGE();
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <ORANGE>
							
							if (bit_is_clear(PIND, BTN))
 168:	48 99       	sbic	0x09, 0	; 9
 16a:	e1 cf       	rjmp	.-62     	; 0x12e <main+0x18>
							
							{
								
								BLUE();
 16c:	0e 94 6d 00 	call	0xda	; 0xda <BLUE>
							
								if (bit_is_clear(PIND, BTN))
 170:	48 99       	sbic	0x09, 0	; 9
 172:	dd cf       	rjmp	.-70     	; 0x12e <main+0x18>
								
								{
									
									RED();
 174:	0e 94 5e 00 	call	0xbc	; 0xbc <RED>
								
									if (bit_is_clear(PIND, BTN))
 178:	48 99       	sbic	0x09, 0	; 9
 17a:	d9 cf       	rjmp	.-78     	; 0x12e <main+0x18>
									
									{
										
										GREEN();
 17c:	0e 94 4f 00 	call	0x9e	; 0x9e <GREEN>
 180:	d6 cf       	rjmp	.-84     	; 0x12e <main+0x18>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
